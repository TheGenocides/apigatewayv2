AWSTemplateFormatVersion: '2010-09-09'
Description: 'LKS Jaktim2 Handi Infrastructure Stack'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

Resources:
  # VPC with IPv4 and IPv6
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 20.2.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: lks-jaktim2-handi

  # IPv6 CIDR Block
  VPCIPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: lks-jaktim2-handi-igw

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.2.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet-1

  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.2.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet-2

  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.2.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet-1

  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.2.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet-2

  # EIP for NAT Instance
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Instance Security Group
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable NAT Instance access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 20.2.2.0/24
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 20.2.3.0/24
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 20.2.2.0/24
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 20.2.3.0/24
      Tags:
        - Key: Name
          Value: NAT-SG

  # NAT Instance
  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0015c0130d6cc5da7
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref NATSecurityGroup
          SubnetId: !Ref PublicSubnet1
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT-Instance

  # Associate EIP with NAT Instance
  NatEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      InstanceId: !Ref NATInstance

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet 1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Private Route through NAT Instance
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  # Associate Private Subnet 1 with Private Route Table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Associate Private Subnet 2 with Private Route Table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for Load Balancer
  SGLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SG-LB

  # Security Group for Applications
  SGApps:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for applications
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 20.2.2.0/24
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 20.2.3.0/24
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 20.2.2.0/24
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 20.2.3.0/24
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SG-Apps

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: RDS-Subnet-Group

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SGApps
      Tags:
        - Key: Name
          Value: RDS-SG

  # RDS Instance
  # RDSInstance:
  #   Type: AWS::RDS::DBInstance
  #   Properties:
  #     DBInstanceIdentifier: LKS-RDS-Apps
  #     Engine: mariadb
  #     DBName: techno-rds
  #     MasterUsername: admin
  #     MasterUserPassword: Technobrain2025!
  #     AllocatedStorage: 20
  #     DBInstanceClass: db.t2.micro
  #     EngineVersion: '10.6'
  #     PubliclyAccessible: false
  #     DBSubnetGroupName: !Ref DBSubnetGroup
  #     VPCSecurityGroups:
  #       - !GetAtt RDSSecurityGroup.GroupId
  #     StorageType: gp2
  #     BackupRetentionPeriod: 7
  #     MultiAZ: false
  #     Tags:
  #       - Key: Name
  #         Value: LKS-RDS-Apps

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
  NATInstancePublicIP:
    Description: NAT Instance Public IP
    Value: !Ref NatEIP  
  # RDSEndpoint:
  #   Description: RDS Endpoint
  #   Value: !GetAtt RDSInstance.Endpoint.Address